import 'package:event_authentication/event_authentication.dart';
import 'package:event_authentication/src/authenticator/hash.dart';

import 'package:event_authentication/src/authenticator/method.dart';

/// Generates a [UserAuthentication] and can also confirm if a password matches
/// one generated by it.
class UserAuthenticationGenerator {
  /// [methodGenerator] used to generate the method field of
  /// generated [UserAuthentication]s
  UserAuthenticationGenerator({
    required this.methodGenerator,
    required this.passwordHasher,
  });

  /// Used to generate the method field of generated [UserAuthentication]s
  final MethodEncryptDecrypt methodGenerator;

  /// Used to hash passwords in [generateAuthentication]
  ///
  /// This is responsible for creating the password and salt fields of
  /// the generated [UserAuthentication]
  final PasswordHasher passwordHasher;

  /// Generates a [UserAuthentication] with the [basePassword] as the key to
  /// pass the authentication.
  ///
  /// Internal [methodGenerator] and [passwordHasher] are used to populate the
  /// values
  UserAuthentication generateAuthentication(
    String basePassword, {
    int saltLength = 64,
  }) {
    final authentication = UserAuthentication();
    final method = methodGenerator.generateMethod();

    authentication
      ..method = methodGenerator.encryptMethod(method)
      ..salt = passwordHasher.generateSalt(length: saltLength)
      ..password = passwordHasher.hash(
        password: basePassword,
        salt: authentication.salt,
        method: authentication.method,
      );

    return authentication;
  }

  /// Returns true if [basePassword] is confirmed by [authentication]
  bool confirmAuthentication(
    UserAuthentication authentication,
    String basePassword,
  ) {
    final hashedPassword = passwordHasher.hash(
      password: basePassword,
      salt: authentication.salt,
      method: authentication.method,
    );

    return authentication.password == hashedPassword;
  }
}
